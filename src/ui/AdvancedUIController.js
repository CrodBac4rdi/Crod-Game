// Advanced UI Controller - Manages all UI components and provides extended functionality
window.AdvancedUIController = class AdvancedUIController {
    constructor(gameState, eventSystem) {
        this.gameState = gameState;
        this.eventSystem = eventSystem;
        
        // UI Components
        this.components = new Map();
        
        // Advanced features
        this.theme = 'default';
        this.animations = true;
        this.particles = true;
        this.sounds = true;
        this.compactMode = false;
        this.debugMode = false;
        
        // UI State
        this.uiState = {
            sidebar: { visible: true, collapsed: false },
            notifications: { enabled: true, position: 'top' },
            floatingText: { enabled: true, limit: 20 },
            performance: { monitoring: false, overlay: false }
        };
        
        // Keyboard shortcuts
        this.shortcuts = new Map([
            ['KeyT', () => this.toggleTheme()],
            ['KeyC', () => this.toggleCompactMode()],
            ['KeyD', () => this.toggleDebugMode()],
            ['KeyP', () => this.toggleParticles()],
            ['KeyS', () => this.toggleSounds()],
            ['KeyA', () => this.toggleAnimations()],
            ['KeyH', () => this.showHelp()],
            ['Escape', () => this.closeAllModals()]
        ]);
        
        // Visual effects
        this.effects = {
            matrixRain: [],
            cosmicDust: [],
            energyOrbs: [],
            warpLines: []
        };
        
        this.init();
    }
    
    init() {
        this.setupKeyboardShortcuts();
        this.createAdvancedUI();
        this.setupThemes();
        this.startVisualEffects();
        this.setupEventListeners();
        
        // Initialize with settings from localStorage
        this.loadSettings();
        
        console.log('ðŸŽ® Advanced UI Controller initialized');
    }
    
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Check if we're in an input field
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
                return;
            }
            
            const shortcut = this.shortcuts.get(e.code);
            if (shortcut) {
                e.preventDefault();
                shortcut();
            }
        });
    }
    
    createAdvancedUI() {
        // Create theme selector
        this.createThemeSelector();
        
        // Create advanced controls panel
        this.createControlsPanel();
        
        // Create help overlay
        this.createHelpOverlay();
        
        // Create debug panel
        this.createDebugPanel();
        
        // Create visual effects controls
        this.createEffectsControls();
    }
    
    createThemeSelector() {
        const themeSelector = document.createElement('div');
        themeSelector.id = 'theme-selector';
        themeSelector.className = 'theme-selector';
        themeSelector.innerHTML = `
            <div class="theme-selector-content">
                <h3>ðŸŽ¨ Theme Selector</h3>
                <div class="theme-options">
                    <div class="theme-option" data-theme="default">
                        <div class="theme-preview default-theme"></div>
                        <span>Default</span>
                    </div>
                    <div class="theme-option" data-theme="neon">
                        <div class="theme-preview neon-theme"></div>
                        <span>Neon</span>
                    </div>
                    <div class="theme-option" data-theme="matrix">
                        <div class="theme-preview matrix-theme"></div>
                        <span>Matrix</span>
                    </div>
                    <div class="theme-option" data-theme="cosmic">
                        <div class="theme-preview cosmic-theme"></div>
                        <span>Cosmic</span>
                    </div>
                    <div class="theme-option" data-theme="retro">
                        <div class="theme-preview retro-theme"></div>
                        <span>Retro</span>
                    </div>
                </div>
            </div>
        `;
        
        // Add event listeners
        themeSelector.addEventListener('click', (e) => {
            const themeOption = e.target.closest('.theme-option');
            if (themeOption) {
                this.setTheme(themeOption.dataset.theme);
            }
        });
        
        document.body.appendChild(themeSelector);
    }
    
    createControlsPanel() {
        const controlsPanel = document.createElement('div');\n        controlsPanel.id = 'advanced-controls';\n        controlsPanel.className = 'advanced-controls';\n        controlsPanel.innerHTML = `\n            <div class=\"controls-header\">\n                <h3>\ud83c\udfae Advanced Controls</h3>\n                <button class=\"minimize-btn\" onclick=\"this.closest('.advanced-controls').classList.toggle('minimized')\">\u2014</button>\n            </div>\n            <div class=\"controls-content\">\n                <div class=\"control-group\">\n                    <label>Visual Effects</label>\n                    <div class=\"control-buttons\">\n                        <button class=\"control-btn\" data-action=\"toggleAnimations\">\ud83c\udfa8 Animations</button>\n                        <button class=\"control-btn\" data-action=\"toggleParticles\">\u2728 Particles</button>\n                        <button class=\"control-btn\" data-action=\"toggleMatrixRain\">\ud83c\udf27\ufe0f Matrix Rain</button>\n                        <button class=\"control-btn\" data-action=\"toggleCosmicDust\">\ud83c\udf0c Cosmic Dust</button>\n                    </div>\n                </div>\n                <div class=\"control-group\">\n                    <label>UI Options</label>\n                    <div class=\"control-buttons\">\n                        <button class=\"control-btn\" data-action=\"toggleCompactMode\">\ud83d\udcf1 Compact Mode</button>\n                        <button class=\"control-btn\" data-action=\"toggleDebugMode\">\ud83d\udd0d Debug Mode</button>\n                        <button class=\"control-btn\" data-action=\"togglePerformanceMonitor\">\ud83d\udcca Performance</button>\n                    </div>\n                </div>\n                <div class=\"control-group\">\n                    <label>Sound & Audio</label>\n                    <div class=\"control-buttons\">\n                        <button class=\"control-btn\" data-action=\"toggleSounds\">\ud83d\udd0a Sound Effects</button>\n                        <button class=\"control-btn\" data-action=\"toggleMusic\">\ud83c\udfb5 Background Music</button>\n                    </div>\n                </div>\n                <div class=\"control-group\">\n                    <label>Quick Actions</label>\n                    <div class=\"control-buttons\">\n                        <button class=\"control-btn\" data-action=\"resetUI\">\ud83d\udd04 Reset UI</button>\n                        <button class=\"control-btn\" data-action=\"exportSettings\">\ud83d\udcbe Export Settings</button>\n                        <button class=\"control-btn\" data-action=\"showHelp\">\u2753 Help</button>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        // Add event listeners\n        controlsPanel.addEventListener('click', (e) => {\n            const btn = e.target.closest('.control-btn');\n            if (btn) {\n                const action = btn.dataset.action;\n                if (this[action]) {\n                    this[action]();\n                    btn.classList.toggle('active');\n                }\n            }\n        });\n        \n        // Position it\n        controlsPanel.style.cssText = `\n            position: fixed;\n            top: 20px;\n            left: 20px;\n            width: 250px;\n            background: rgba(10, 10, 15, 0.95);\n            border: 1px solid var(--border-color);\n            border-radius: var(--radius-lg);\n            backdrop-filter: blur(10px);\n            z-index: 9999;\n            display: none;\n            contain: layout style;\n            transform: translateZ(0);\n        `;\n        \n        document.body.appendChild(controlsPanel);\n    }\n    \n    createHelpOverlay() {\n        const helpOverlay = document.createElement('div');\n        helpOverlay.id = 'help-overlay';\n        helpOverlay.className = 'help-overlay';\n        helpOverlay.innerHTML = `\n            <div class=\"help-content\">\n                <div class=\"help-header\">\n                    <h2>\ud83d\ude80 Game Controls & Features</h2>\n                    <button class=\"close-btn\" onclick=\"this.closest('.help-overlay').style.display='none'\">\u00d7</button>\n                </div>\n                <div class=\"help-sections\">\n                    <div class=\"help-section\">\n                        <h3>Keyboard Shortcuts</h3>\n                        <div class=\"shortcut-list\">\n                            <div class=\"shortcut\"><kbd>T</kbd> Toggle Theme</div>\n                            <div class=\"shortcut\"><kbd>C</kbd> Compact Mode</div>\n                            <div class=\"shortcut\"><kbd>D</kbd> Debug Mode</div>\n                            <div class=\"shortcut\"><kbd>P</kbd> Toggle Particles</div>\n                            <div class=\"shortcut\"><kbd>S</kbd> Toggle Sounds</div>\n                            <div class=\"shortcut\"><kbd>A</kbd> Toggle Animations</div>\n                            <div class=\"shortcut\"><kbd>H</kbd> Show Help</div>\n                            <div class=\"shortcut\"><kbd>F1</kbd> Performance Monitor</div>\n                            <div class=\"shortcut\"><kbd>ESC</kbd> Close Modals</div>\n                        </div>\n                    </div>\n                    <div class=\"help-section\">\n                        <h3>Visual Effects</h3>\n                        <ul>\n                            <li>Matrix Rain - Falling code effect</li>\n                            <li>Cosmic Dust - Floating particles</li>\n                            <li>Energy Orbs - Glowing energy effects</li>\n                            <li>Neon Glow - Holographic text effects</li>\n                            <li>Warp Lines - Speed effect lines</li>\n                        </ul>\n                    </div>\n                    <div class=\"help-section\">\n                        <h3>Themes</h3>\n                        <ul>\n                            <li>Default - Clean blue/purple theme</li>\n                            <li>Neon - Bright electric colors</li>\n                            <li>Matrix - Green matrix style</li>\n                            <li>Cosmic - Space-themed colors</li>\n                            <li>Retro - 80s synthwave style</li>\n                        </ul>\n                    </div>\n                    <div class=\"help-section\">\n                        <h3>Performance</h3>\n                        <ul>\n                            <li>Optimized rendering with GPU acceleration</li>\n                            <li>Object pooling for UI elements</li>\n                            <li>Efficient event handling</li>\n                            <li>Smart update throttling</li>\n                            <li>Memory management</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        helpOverlay.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.8);\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10000;\n            backdrop-filter: blur(4px);\n        `;\n        \n        document.body.appendChild(helpOverlay);\n    }\n    \n    createDebugPanel() {\n        const debugPanel = document.createElement('div');\n        debugPanel.id = 'debug-panel';\n        debugPanel.innerHTML = `\n            <div class=\"debug-header\">\n                <h3>\ud83d\udd0d Debug Panel</h3>\n                <button onclick=\"this.closest('#debug-panel').style.display='none'\">\u00d7</button>\n            </div>\n            <div class=\"debug-content\">\n                <div class=\"debug-section\">\n                    <h4>Game State</h4>\n                    <pre id=\"game-state-debug\"></pre>\n                </div>\n                <div class=\"debug-section\">\n                    <h4>Event System</h4>\n                    <pre id=\"event-system-debug\"></pre>\n                </div>\n                <div class=\"debug-section\">\n                    <h4>UI Components</h4>\n                    <pre id=\"ui-components-debug\"></pre>\n                </div>\n            </div>\n        `;\n        \n        debugPanel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            width: 400px;\n            max-height: 50vh;\n            background: rgba(10, 10, 15, 0.95);\n            border: 1px solid var(--border-color);\n            border-radius: var(--radius-lg);\n            backdrop-filter: blur(10px);\n            z-index: 9999;\n            display: none;\n            overflow-y: auto;\n            font-family: monospace;\n            font-size: 11px;\n        `;\n        \n        document.body.appendChild(debugPanel);\n    }\n    \n    createEffectsControls() {\n        const effectsPanel = document.createElement('div');\n        effectsPanel.id = 'effects-controls';\n        effectsPanel.innerHTML = `\n            <div class=\"effects-header\">\n                <h3>\u2728 Visual Effects</h3>\n                <button class=\"toggle-btn\" onclick=\"this.closest('#effects-controls').classList.toggle('collapsed')\">\u2195\ufe0f</button>\n            </div>\n            <div class=\"effects-content\">\n                <div class=\"effect-control\">\n                    <label>Matrix Rain Density</label>\n                    <input type=\"range\" id=\"matrix-density\" min=\"0\" max=\"100\" value=\"20\">\n                </div>\n                <div class=\"effect-control\">\n                    <label>Cosmic Dust Count</label>\n                    <input type=\"range\" id=\"dust-count\" min=\"0\" max=\"50\" value=\"10\">\n                </div>\n                <div class=\"effect-control\">\n                    <label>Energy Orb Intensity</label>\n                    <input type=\"range\" id=\"orb-intensity\" min=\"0\" max=\"100\" value=\"30\">\n                </div>\n                <div class=\"effect-control\">\n                    <label>Animation Speed</label>\n                    <input type=\"range\" id=\"anim-speed\" min=\"0.1\" max=\"2\" step=\"0.1\" value=\"1\">\n                </div>\n                <div class=\"effect-buttons\">\n                    <button onclick=\"window.advancedUI.createMatrixRain()\">\ud83c\udf27\ufe0f Rain</button>\n                    <button onclick=\"window.advancedUI.createCosmicDust()\">\ud83c\udf0c Dust</button>\n                    <button onclick=\"window.advancedUI.createEnergyOrb()\">\u26a1 Orb</button>\n                    <button onclick=\"window.advancedUI.createWarpEffect()\">\ud83d\ude80 Warp</button>\n                </div>\n            </div>\n        `;\n        \n        effectsPanel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            left: 20px;\n            width: 200px;\n            background: rgba(10, 10, 15, 0.95);\n            border: 1px solid var(--border-color);\n            border-radius: var(--radius-lg);\n            backdrop-filter: blur(10px);\n            z-index: 9999;\n            display: none;\n        `;\n        \n        document.body.appendChild(effectsPanel);\n    }\n    \n    // Advanced UI methods\n    toggleTheme() {\n        const themes = ['default', 'neon', 'matrix', 'cosmic', 'retro'];\n        const currentIndex = themes.indexOf(this.theme);\n        const nextIndex = (currentIndex + 1) % themes.length;\n        this.setTheme(themes[nextIndex]);\n    }\n    \n    setTheme(theme) {\n        this.theme = theme;\n        document.body.className = `theme-${theme}`;\n        \n        // Update CSS variables based on theme\n        const root = document.documentElement;\n        switch(theme) {\n            case 'neon':\n                root.style.setProperty('--color-primary', '#ff00ff');\n                root.style.setProperty('--color-secondary', '#00ffff');\n                root.style.setProperty('--color-accent', '#ffff00');\n                break;\n            case 'matrix':\n                root.style.setProperty('--color-primary', '#00ff00');\n                root.style.setProperty('--color-secondary', '#008800');\n                root.style.setProperty('--color-accent', '#00aa00');\n                break;\n            case 'cosmic':\n                root.style.setProperty('--color-primary', '#9966ff');\n                root.style.setProperty('--color-secondary', '#ff6699');\n                root.style.setProperty('--color-accent', '#ffcc00');\n                break;\n            case 'retro':\n                root.style.setProperty('--color-primary', '#ff0080');\n                root.style.setProperty('--color-secondary', '#00ff80');\n                root.style.setProperty('--color-accent', '#ff8000');\n                break;\n            default:\n                root.style.setProperty('--color-primary', '#00d4ff');\n                root.style.setProperty('--color-secondary', '#ff00ff');\n                root.style.setProperty('--color-accent', '#ffaa00');\n        }\n        \n        this.saveSettings();\n    }\n    \n    // Visual effects methods\n    createMatrixRain() {\n        const line = document.createElement('div');\n        line.className = 'matrix-rain';\n        line.style.left = Math.random() * 100 + 'vw';\n        line.style.animationDuration = (2 + Math.random() * 3) + 's';\n        line.style.animationDelay = Math.random() * 2 + 's';\n        \n        document.body.appendChild(line);\n        \n        setTimeout(() => {\n            line.remove();\n        }, 5000);\n    }\n    \n    createCosmicDust() {\n        const dust = document.createElement('div');\n        dust.className = 'cosmic-dust';\n        dust.style.left = Math.random() * 100 + 'vw';\n        dust.style.animationDuration = (5 + Math.random() * 10) + 's';\n        dust.style.animationDelay = Math.random() * 3 + 's';\n        \n        document.body.appendChild(dust);\n        \n        setTimeout(() => {\n            dust.remove();\n        }, 15000);\n    }\n    \n    createEnergyOrb() {\n        const orb = document.createElement('div');\n        orb.className = 'energy-orb';\n        orb.style.left = Math.random() * (window.innerWidth - 20) + 'px';\n        orb.style.top = Math.random() * (window.innerHeight - 20) + 'px';\n        \n        document.body.appendChild(orb);\n        \n        setTimeout(() => {\n            orb.remove();\n        }, 3000);\n    }\n    \n    createWarpEffect() {\n        for (let i = 0; i < 20; i++) {\n            const line = document.createElement('div');\n            line.className = 'warp-line';\n            line.style.left = Math.random() * 100 + 'vw';\n            line.style.top = Math.random() * 100 + 'vh';\n            line.style.animationDelay = (i * 0.05) + 's';\n            \n            document.body.appendChild(line);\n            \n            setTimeout(() => {\n                line.remove();\n            }, 1000);\n        }\n    }\n    \n    // Toggle methods\n    toggleCompactMode() {\n        this.compactMode = !this.compactMode;\n        document.body.classList.toggle('compact-mode', this.compactMode);\n        this.saveSettings();\n    }\n    \n    toggleDebugMode() {\n        this.debugMode = !this.debugMode;\n        const debugPanel = document.getElementById('debug-panel');\n        debugPanel.style.display = this.debugMode ? 'block' : 'none';\n        \n        if (this.debugMode) {\n            this.updateDebugInfo();\n        }\n    }\n    \n    toggleAnimations() {\n        this.animations = !this.animations;\n        document.body.classList.toggle('no-animations', !this.animations);\n        this.saveSettings();\n    }\n    \n    toggleParticles() {\n        this.particles = !this.particles;\n        this.saveSettings();\n    }\n    \n    toggleSounds() {\n        this.sounds = !this.sounds;\n        this.saveSettings();\n    }\n    \n    toggleMatrixRain() {\n        if (this.effects.matrixRain.length > 0) {\n            this.effects.matrixRain.forEach(effect => effect.remove());\n            this.effects.matrixRain = [];\n        } else {\n            // Start continuous matrix rain\n            const createRain = () => {\n                this.createMatrixRain();\n                if (this.effects.matrixRain.length > 0) {\n                    setTimeout(createRain, 100 + Math.random() * 200);\n                }\n            };\n            this.effects.matrixRain.push({ remove: () => {} });\n            createRain();\n        }\n    }\n    \n    toggleCosmicDust() {\n        if (this.effects.cosmicDust.length > 0) {\n            this.effects.cosmicDust.forEach(effect => effect.remove());\n            this.effects.cosmicDust = [];\n        } else {\n            // Start continuous cosmic dust\n            const createDust = () => {\n                this.createCosmicDust();\n                if (this.effects.cosmicDust.length > 0) {\n                    setTimeout(createDust, 500 + Math.random() * 1000);\n                }\n            };\n            this.effects.cosmicDust.push({ remove: () => {} });\n            createDust();\n        }\n    }\n    \n    togglePerformanceMonitor() {\n        if (window.performanceMonitor) {\n            window.performanceMonitor.toggle();\n        }\n    }\n    \n    // Utility methods\n    showHelp() {\n        const helpOverlay = document.getElementById('help-overlay');\n        helpOverlay.style.display = 'flex';\n    }\n    \n    closeAllModals() {\n        document.querySelectorAll('.modal, .help-overlay').forEach(modal => {\n            modal.style.display = 'none';\n        });\n    }\n    \n    resetUI() {\n        // Reset all UI components to default state\n        this.theme = 'default';\n        this.animations = true;\n        this.particles = true;\n        this.sounds = true;\n        this.compactMode = false;\n        this.debugMode = false;\n        \n        this.setTheme('default');\n        document.body.className = 'theme-default';\n        \n        this.saveSettings();\n    }\n    \n    exportSettings() {\n        const settings = {\n            theme: this.theme,\n            animations: this.animations,\n            particles: this.particles,\n            sounds: this.sounds,\n            compactMode: this.compactMode,\n            uiState: this.uiState\n        };\n        \n        const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `ui-settings-${Date.now()}.json`;\n        a.click();\n        URL.revokeObjectURL(url);\n    }\n    \n    updateDebugInfo() {\n        if (!this.debugMode) return;\n        \n        const gameStateEl = document.getElementById('game-state-debug');\n        const eventSystemEl = document.getElementById('event-system-debug');\n        const uiComponentsEl = document.getElementById('ui-components-debug');\n        \n        if (gameStateEl) {\n            gameStateEl.textContent = JSON.stringify({\n                energy: this.gameState.energy,\n                crystals: this.gameState.crystals,\n                level: this.gameState.level,\n                clickPower: this.gameState.clickPower\n            }, null, 2);\n        }\n        \n        if (eventSystemEl) {\n            eventSystemEl.textContent = `Event listeners: ${Object.keys(this.eventSystem.listeners || {}).length}`;\n        }\n        \n        if (uiComponentsEl) {\n            uiComponentsEl.textContent = `Components: ${this.components.size}`;\n        }\n        \n        // Update every second\n        if (this.debugMode) {\n            setTimeout(() => this.updateDebugInfo(), 1000);\n        }\n    }\n    \n    setupEventListeners() {\n        // Listen for window resize\n        window.addEventListener('resize', () => {\n            this.handleResize();\n        });\n        \n        // Listen for visibility changes\n        document.addEventListener('visibilitychange', () => {\n            if (document.hidden) {\n                this.pauseEffects();\n            } else {\n                this.resumeEffects();\n            }\n        });\n    }\n    \n    handleResize() {\n        // Reposition UI elements on resize\n        const controlsPanel = document.getElementById('advanced-controls');\n        const effectsPanel = document.getElementById('effects-controls');\n        \n        if (window.innerWidth < 768) {\n            // Mobile layout adjustments\n            if (controlsPanel) {\n                controlsPanel.style.width = '90vw';\n                controlsPanel.style.left = '5vw';\n            }\n        } else {\n            // Desktop layout\n            if (controlsPanel) {\n                controlsPanel.style.width = '250px';\n                controlsPanel.style.left = '20px';\n            }\n        }\n    }\n    \n    pauseEffects() {\n        // Pause all visual effects when tab is hidden\n        document.querySelectorAll('[class*=\"-effect\"], [class*=\"-animation\"]').forEach(el => {\n            el.style.animationPlayState = 'paused';\n        });\n    }\n    \n    resumeEffects() {\n        // Resume all visual effects when tab is visible\n        document.querySelectorAll('[class*=\"-effect\"], [class*=\"-animation\"]').forEach(el => {\n            el.style.animationPlayState = 'running';\n        });\n    }\n    \n    saveSettings() {\n        const settings = {\n            theme: this.theme,\n            animations: this.animations,\n            particles: this.particles,\n            sounds: this.sounds,\n            compactMode: this.compactMode,\n            uiState: this.uiState\n        };\n        \n        localStorage.setItem('advancedUI_settings', JSON.stringify(settings));\n    }\n    \n    loadSettings() {\n        const saved = localStorage.getItem('advancedUI_settings');\n        if (saved) {\n            const settings = JSON.parse(saved);\n            this.theme = settings.theme || 'default';\n            this.animations = settings.animations !== false;\n            this.particles = settings.particles !== false;\n            this.sounds = settings.sounds !== false;\n            this.compactMode = settings.compactMode || false;\n            this.uiState = { ...this.uiState, ...settings.uiState };\n            \n            // Apply settings\n            this.setTheme(this.theme);\n            if (this.compactMode) this.toggleCompactMode();\n            if (!this.animations) this.toggleAnimations();\n        }\n    }\n    \n    startVisualEffects() {\n        // Start some initial effects\n        if (this.particles) {\n            // Create initial cosmic dust\n            for (let i = 0; i < 3; i++) {\n                setTimeout(() => this.createCosmicDust(), i * 1000);\n            }\n        }\n        \n        // Add click effect to the game canvas\n        const canvas = document.getElementById('game-canvas');\n        if (canvas) {\n            canvas.addEventListener('click', (e) => {\n                this.createClickEffect(e.clientX, e.clientY);\n            });\n        }\n    }\n    \n    createClickEffect(x, y) {\n        const ripple = document.createElement('div');\n        ripple.className = 'click-ripple';\n        ripple.style.left = (x - 25) + 'px';\n        ripple.style.top = (y - 25) + 'px';\n        ripple.style.width = '50px';\n        ripple.style.height = '50px';\n        \n        document.body.appendChild(ripple);\n        \n        setTimeout(() => {\n            ripple.remove();\n        }, 600);\n    }\n    \n    setupThemes() {\n        // Add theme styles\n        const themeStyles = `\n            /* Theme Styles */\n            .theme-selector {\n                position: fixed;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                background: rgba(10, 10, 15, 0.95);\n                border: 1px solid var(--border-color);\n                border-radius: var(--radius-xl);\n                padding: 20px;\n                z-index: 10000;\n                display: none;\n                backdrop-filter: blur(10px);\n            }\n            \n            .theme-options {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));\n                gap: 15px;\n                margin-top: 15px;\n            }\n            \n            .theme-option {\n                text-align: center;\n                cursor: pointer;\n                padding: 10px;\n                border-radius: var(--radius-md);\n                transition: all var(--transition-normal);\n            }\n            \n            .theme-option:hover {\n                background: var(--bg-tertiary);\n                transform: translateY(-2px);\n            }\n            \n            .theme-preview {\n                width: 60px;\n                height: 40px;\n                border-radius: var(--radius-sm);\n                margin: 0 auto 8px;\n                border: 2px solid transparent;\n            }\n            \n            .default-theme { background: linear-gradient(45deg, #00d4ff, #ff00ff); }\n            .neon-theme { background: linear-gradient(45deg, #ff00ff, #00ffff); }\n            .matrix-theme { background: linear-gradient(45deg, #00ff00, #008800); }\n            .cosmic-theme { background: linear-gradient(45deg, #9966ff, #ff6699); }\n            .retro-theme { background: linear-gradient(45deg, #ff0080, #00ff80); }\n            \n            /* Controls Panel Styles */\n            .advanced-controls {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;\n                color: var(--text-primary);\n                transition: all var(--transition-normal);\n            }\n            \n            .advanced-controls.minimized .controls-content {\n                display: none;\n            }\n            \n            .controls-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 15px;\n                border-bottom: 1px solid var(--border-color);\n            }\n            \n            .controls-content {\n                padding: 15px;\n            }\n            \n            .control-group {\n                margin-bottom: 15px;\n            }\n            \n            .control-group label {\n                display: block;\n                margin-bottom: 8px;\n                font-weight: 600;\n                color: var(--text-secondary);\n            }\n            \n            .control-buttons {\n                display: flex;\n                flex-wrap: wrap;\n                gap: 5px;\n            }\n            \n            .control-btn {\n                background: var(--bg-tertiary);\n                border: 1px solid var(--border-color);\n                color: var(--text-primary);\n                padding: 8px 12px;\n                border-radius: var(--radius-sm);\n                cursor: pointer;\n                font-size: 12px;\n                transition: all var(--transition-fast);\n            }\n            \n            .control-btn:hover {\n                background: var(--bg-secondary);\n                transform: translateY(-1px);\n            }\n            \n            .control-btn.active {\n                background: var(--color-primary);\n                color: var(--bg-primary);\n            }\n            \n            /* Help styles */\n            .help-content {\n                background: var(--bg-secondary);\n                border-radius: var(--radius-xl);\n                padding: 30px;\n                max-width: 800px;\n                max-height: 80vh;\n                overflow-y: auto;\n                color: var(--text-primary);\n            }\n            \n            .help-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 20px;\n                padding-bottom: 15px;\n                border-bottom: 1px solid var(--border-color);\n            }\n            \n            .help-sections {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n                gap: 20px;\n            }\n            \n            .help-section h3 {\n                color: var(--color-primary);\n                margin-bottom: 10px;\n            }\n            \n            .shortcut-list {\n                display: grid;\n                gap: 5px;\n            }\n            \n            .shortcut {\n                display: flex;\n                align-items: center;\n                gap: 10px;\n            }\n            \n            kbd {\n                background: var(--bg-tertiary);\n                border: 1px solid var(--border-color);\n                border-radius: var(--radius-sm);\n                padding: 2px 6px;\n                font-family: monospace;\n                font-size: 11px;\n            }\n            \n            /* Compact mode styles */\n            .compact-mode .resource-panel {\n                gap: var(--spacing-sm);\n            }\n            \n            .compact-mode .resource {\n                padding: var(--spacing-sm);\n            }\n            \n            .compact-mode .side-panel {\n                width: 280px;\n            }\n            \n            .compact-mode .upgrade-item {\n                padding: var(--spacing-sm);\n            }\n            \n            /* No animations mode */\n            .no-animations * {\n                animation: none !important;\n                transition: none !important;\n            }\n        `;\n        \n        const styleSheet = document.createElement('style');\n        styleSheet.textContent = themeStyles;\n        document.head.appendChild(styleSheet);\n    }\n};\n\n// Initialize the Advanced UI Controller\nwindow.advancedUI = new AdvancedUIController(\n    window.gameState || {},\n    window.eventSystem || { on: () => {} }\n);